ca.h
void ca_print() 

ca_transaction.h
void block_print(struct blkinfo *bi) 
void blk_print(struct blkdb *db) 
void NetMessage(const void *inData, void *outData) 
int CreateTx(const char* From, const char * To, const char * amt, const char *ip, uint32_t needVerifyPreHashCount, double minerFees);
struct blkinfo * CreateBlock(void * inData, void *outData) 
bool AddBlock(const CBlock & cblock, bool isSync) 
CTransaction CreateWorkTx(const CTransaction & tx, int extra_award = 0) 
void Init() 
void InitAccount(accountinfo *acc)
void GetDefault58Addr(char *buf, size_t len) 
void *DataSynch(void *arg)  
cstring *ser_reqblkinfo(const struct blkdb *db) 

ca_base58.h
bool GetBase58Addr(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz); 

ca_cstr.h
C语言实现 cstring 实现对字符串的操作，及相关函数
ca_global.h
全局变量及宏定义

extern struct chain_info g_chain_metadata; 
extern ECDSA<ECP, SHA1>::PrivateKey g_privateKey; 
extern ECDSA<ECP, SHA1>::PublicKey g_publicKey; 
extern accountinfo g_AccountInfo; 
extern bool g_phone; 
extern pthread_rwlock_t db_rwlock; 
extern pthread_rwlock_t tx_rwlock; 

DECIMAL_NUM  
PRE_BLOCK_VALID_HEIGHT 
SYNC_DATA  
SYNC_DATA_COUNT 
ENCOURAGE_TX  
TXHASHDB_SWITCH 

ca_message.h
cstring *message_str(const unsigned char netmagic[4], const char *command_, const void *data, uint32_t data_len); 

ca_serialize.h
变量类型的序列化和反序列化函数

ca_hexcode.h 
16进制和字符串转换函数

ca_parr.h
parr 类型的相关函数 ， 存储交易数据信息

Crypto_ECDSA.h

账户管理相关函数
